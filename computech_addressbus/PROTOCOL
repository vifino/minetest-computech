Addressbus, at it's core, is a simple message network.
Messages are:
 "read32": params[1]: address (Should be aligned)
           respond(w32): Return the 32-bit word at that address.
           Behavior for senders should be to AND responses.
 "write32": params[1]: address (Should be aligned)
            params[2]: data
            respond(): Confirms a write occurred.
            Behavior for senders should be to consider 0 responses "memory error", otherwise things are fine.
 "extent": respond(extent):
           Return the length, in bytes,
            of the region of memory from address 0 'upwards'.
           For a 64k RAM, this would be 0x10000.
           Behavior for senders should be to use the longest response.
           (previously, params[1] was a start address, and the last valid address was used,
            but that was changed for simplicity.
            The only reason this is needed is to measure contiguous area starting from 0 anyway.)
 "interrupt": params[1]: PID (Should be originally sent as zero.
                              Memory Chain Units should offset PID, so memory and PID layout matches.)
              This is the only device->CPU message, and should set the interrupt waiting latch.
              If the user wants to actually use interrupts,
               an interrupt helper should be in place
               to allow proper queue semantics. (Of course, for a custom-built OS and system, anything can be used.)
NOTE: There are some messages, beginning with internal_cable,
       which bypass the cable cache.
      These are solely used in the maintenance of the cable cache.